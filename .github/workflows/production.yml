name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - profile-picture-feature
      - fix-*
  pull_request:
    branches:
      - main
      - profile-picture-feature

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.12] # Define Python versions here
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Clear pip cache to ensure fresh install
          pip cache purge
          # Install Pillow explicitly first
          pip install Pillow==10.1.0
          # Then install all other requirements
          pip install -r requirements.txt
          # Verify Pillow is installed
          pip list | grep Pillow || echo "Pillow not found!"
          
      - name: Run tests with Pytest
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb  # Configure the DATABASE_URL environment variable for tests
        run: pytest

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Skip Docker login if secrets aren't available
      - name: Check for Docker credentials
        id: check_secrets
        env:
          USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [[ -n "$USERNAME" && -n "$TOKEN" ]]; then
            echo "has_docker_secrets=true" >> $GITHUB_OUTPUT
          else
            echo "has_docker_secrets=false" >> $GITHUB_OUTPUT
            echo "::warning::DockerHub credentials not found. Docker build will run without push."
          fi
      
      - name: Log in to DockerHub
        if: steps.check_secrets.outputs.has_docker_secrets == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ steps.check_secrets.outputs.has_docker_secrets == 'true' }}
          tags: sairamcharan9/user_management:${{ github.sha }} # Uses the Git SHA for tagging
          platforms: linux/amd64 # Simplified for faster builds
          cache-from: type=registry,ref=sairamcharan9/user_management:cache
          cache-to: type=inline,mode=max
          
      - name: Scan the Docker image
        if: steps.check_secrets.outputs.has_docker_secrets == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sairamcharan9/user_management:${{ github.sha }}'
          format: 'table'
          exit-code: '0' # Report vulnerabilities but don't fail the build
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
